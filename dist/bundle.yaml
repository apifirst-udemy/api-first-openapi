openapi: 3.0.3
info:
  version: 1.0.1
  title: API first course on Udemy
  termsOfService: https://example.com/terms/
  contact:
    name: Contact our support
    email: rsouza01@gmail.com
    url: http://example.com/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://redocly.github.io/openapi-template/logo.png
    altText: OpenAPI example logo
  description: |
    # Introduction
    API first course on Udemy
servers:
  - url: https://{tenant}/api/v1
    variables:
      tenant:
        default: www
        description: Your tenant id
  - url: https://example.com/api/v1
security:
  - basic_auth: []
tags:
  - name: Customer
    description: Example actions on customer accounts.
  - name: Product
    description: Product operations
  - name: Order
    description: Operations about orders.
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: https://github.com/Redocly/create-openapi-repo
paths:
  /v1/customers:
    get:
      tags:
        - Customer
      summary: Get a list of customers
      description: Get a list of customers based on some param.
      operationId: listCustomers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer_list'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Customer
      summary: Create a new customer
      description: Create a new customer via rest endpoint
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customer'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: The location of the new customer
              schema:
                type: string
                format: uri
                example: /v1/customers/27ca5995-f6e1-46bb-8f18-52458b7ed96e
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /v1/customers/{customerId}:
    get:
      tags:
        - Customer
      summary: Get a customer by ID
      description: Get a customer by ID via parameter
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          description: The ID of the customer to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/customer'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /v1/products:
    get:
      tags:
        - Product
      summary: Get a list of Products
      description: Get a list of Products based on some param.
      operationId: listProducts
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product_list'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Product
      summary: Create a new product
      description: Create a new product.
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_create'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: Location of the new resource
              schema:
                type: string
                example: /v1/products/27ca5995-f6e1-46bb-8f18-52458b7ed96e
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /v1/products/{productId}:
    get:
      tags:
        - Products
      summary: Get a product by ID
      description: Get a product by ID via parameter
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: The ID of the product to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - Products
      summary: Update a product by ID
      description: Update a product by ID via parameter
      operationId: updateProductById
      parameters:
        - name: productId
          in: path
          description: The ID of the product to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product_update'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /v1/orders:
    get:
      tags:
        - Order
      summary: List Orders
      description: List Orders endpoint via some parameter
      operationId: listOrders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order_list'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    post:
      tags:
        - Orders
      summary: Create a new order
      description: Create a new order.
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order_create'
      responses:
        '201':
          description: Order Created
          headers:
            Location:
              description: Location of the new resource
              schema:
                type: string
                example: /v1/orders/27ca5995-f6e1-46bb-8f18-52458b7ed96e
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /v1/orders/{orderId}:
    get:
      tags:
        - Order
      summary: Get Order by id
      description: Get Order by id as usual by api spec.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/order'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /v1/categories:
    get:
      tags:
        - Products
      summary: List Categories
      description: List Categories
      operationId: listCategories
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/category_list'
        '400':
          description: Bad Request
        '404':
          description: Not Found
components:
  securitySchemes:
    main_auth:
      description: Example description text of the OAuth2 scheme.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.com/api/oauth/dialog
          scopes:
            read:users: read user info
            write:users: modify or remove users
    api_key:
      description: Example description text of the API key scheme.
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
  schemas:
    name:
      type: object
      properties:
        prefix:
          type: string
          description: Name Prefix
          minLength: 0
          maxLength: 25
          example: Mr.
          nullable: true
        firstName:
          type: string
          description: First Name
          minLength: 2
          maxLength: 100
          example: John
        lastName:
          type: string
          description: Last Name
          minLength: 2
          maxLength: 100
          example: Thompson
        suffix:
          type: string
          description: Name Suffix
          minLength: 0
          maxLength: 25
          nullable: true
      required:
        - firstName
        - lastName
    iso_timestamp:
      type: string
      format: date-time
      description: ISO 8601 Timestamp. Date Created and Date Updated are system managed values, should not be sent in request payloads - will be ignored.
      example: '2022-08-22T11:43:06-07:00'
      title: ISO Timestamp
      readOnly: true
      nullable: true
    address:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier representing a specific customer
          readOnly: true
          nullable: true
        addressLine1:
          type: string
          description: Address Line 1
          minLength: 3
          maxLength: 100
          example: 123 Main Street
        addressLine2:
          type: string
          description: Address Line 2
          minLength: 3
          maxLength: 100
          nullable: true
        city:
          type: string
          description: City
          minLength: 2
          maxLength: 100
          example: St Petersburg
        state:
          type: string
          description: 2 character state code
          minLength: 2
          maxLength: 2
          example: FL
        zip:
          type: string
          description: Zip Code
          minLength: 5
          maxLength: 10
          example: 33701
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - addressLine1
        - city
        - state
        - zip
    payment_method:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier representing a specific payment method.
          readOnly: true
          nullable: true
        displayName:
          type: string
          minLength: 2
          maxLength: 100
          example: My Chase Card
        cardNumber:
          type: integer
          example: 1234567890123456
        expiryMonth:
          type: integer
          example: 7
        expiryYear:
          type: integer
          example: 26
        cvv:
          type: integer
          example: 123
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - displayName
        - cardNumber
        - expiryMonth
        - expiryYear
        - cvv
    customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier representing a specific customer
          readOnly: true
          nullable: true
        name:
          $ref: '#/components/schemas/name'
        shipToAddress:
          $ref: '#/components/schemas/address'
        billToAddress:
          $ref: '#/components/schemas/address'
        email:
          type: string
          maxLength: 255
          minLength: 3
          example: rsouza01@gmail.com
          nullable: true
        phone:
          type: string
          maxLength: 15
          minLength: 7
          example: 800-555-1212
          nullable: true
        paymentMethods:
          type: array
          items:
            $ref: '#/components/schemas/payment_method'
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - name
        - shipToAddress
        - billToAddress
    customer_list:
      type: array
      items:
        $ref: '#/components/schemas/customer'
    Problem:
      type: object
      additionalProperties: true
      minProperties: 1
      description: The Problem Details JSON Object [[RFC7807](https://tools.ietf.org/html/rfc7807)].
      properties:
        type:
          type: string
          description: A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".
          format: uri
        title:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
        status:
          type: integer
          description: The HTTP status code.
          minimum: 400
          maximum: 599
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.  It may or may not yield further information if dereferenced.
    dimensions:
      type: object
      properties:
        length:
          type: integer
          description: The length of the product
          minimum: 1
          maximum: 999
          example: 10
        width:
          type: integer
          description: The width of the product
          minimum: 1
          maximum: 999
          example: 10
        height:
          type: integer
          description: The height of the product
          minimum: 1
          maximum: 999
          example: 10
      description: The dimensions of the product
      required:
        - length
        - width
        - height
    category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the category
          readOnly: true
          nullable: true
        category:
          type: string
          description: The category of the product
          minLength: 3
          maxLength: 25
          example: Electronics
        description:
          type: string
          description: The description of the category
          minLength: 3
          maxLength: 255
          example: Electronics and Gadgets
        category_code:
          type: string
          description: The category code of the product
          minLength: 3
          maxLength: 25
          example: ELECTRONICS
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - category
        - description
        - category_code
    image:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the image
          readOnly: true
          nullable: true
        url:
          type: string
          format: url
          description: The url of the image
          minLength: 5
          maxLength: 500
          example: https://springframework.guru/wp-content/uploads/2019/08/spring-framework-guru-logo.jpg
        altText:
          type: string
          nullable: true
          minLength: 3
          maxLength: 255
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - url
    product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the product
          readOnly: true
          nullable: true
        description:
          type: string
          description: The description of the product
          minLength: 3
          maxLength: 255
        dimensions:
          $ref: '#/components/schemas/dimensions'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/category'
        images:
          type: array
          items:
            $ref: '#/components/schemas/image'
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        cost:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - description
        - price
    product_list:
      type: array
      items:
        $ref: '#/components/schemas/product'
    product_create:
      type: object
      properties:
        description:
          type: string
          description: The description of the product
          minLength: 3
          maxLength: 255
        dimensions:
          $ref: '#/components/schemas/dimensions'
        categories:
          type: array
          description: The category codes for the product
          items:
            type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/image'
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        cost:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
      required:
        - description
        - price
    product_image_update:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the image
          nullable: true
        url:
          type: string
          format: url
          description: The url of the image
          minLength: 5
          maxLength: 500
          example: https://springframework.guru/wp-content/uploads/2019/08/spring-framework-guru-logo.jpg
        altText:
          type: string
          nullable: true
          minLength: 3
          maxLength: 255
      required:
        - url
        - id
    product_update:
      type: object
      properties:
        description:
          type: string
          description: The description of the product
          minLength: 3
          maxLength: 255
        dimensions:
          $ref: '#/components/schemas/dimensions'
        categories:
          type: array
          description: The category codes for the product
          items:
            type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/product_image_update'
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
        cost:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
      required:
        - description
        - price
    order_customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the customer
        name:
          $ref: '#/components/schemas/name'
        shipToAddress:
          $ref: '#/components/schemas/address'
        billToAddress:
          $ref: '#/components/schemas/address'
        email:
          type: string
          description: The email address of the customer
        phone:
          type: string
          description: The phone number of the customer
        selectedPaymentMethod:
          $ref: '#/components/schemas/payment_method'
    order_product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the product
        description:
          type: string
          description: The description of the product
        price:
          type: string
          pattern: ^-?(?:0|[1-9]\d{0,2}(?:,?\d{3})*)(?:\.\d+)?$
    order_line:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the order line
          readOnly: true
        product:
          $ref: '#/components/schemas/order_product'
        orderQuantity:
          type: integer
          description: The quantity of the product in the order
          minimum: 1
          maximum: 10000
          example: 2
        shipQuantity:
          type: integer
          description: The quantity of the product shipped
          minimum: 1
          maximum: 10000
          example: 2
          nullable: true
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - product
        - orderQuantity
    order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the order
          readOnly: true
        customer:
          $ref: '#/components/schemas/order_customer'
        orderStatus:
          type: string
          enum:
            - NEW
            - HOLD
            - SHIPPED
            - DELIVERED
            - CLOSED
          default: NEW
        shipmentInfo:
          type: string
          minLength: 1
          maxLength: 255
          nullable: true
        orderLines:
          type: array
          items:
            $ref: '#/components/schemas/order_line'
          description: The order lines of the order
        dateCreated:
          $ref: '#/components/schemas/iso_timestamp'
        dateUpdated:
          $ref: '#/components/schemas/iso_timestamp'
      required:
        - customer
        - orderStatus
        - orderLines
    order_list:
      type: array
      items:
        $ref: '#/components/schemas/order'
    order_line_create:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        orderQuantity:
          type: integer
          format: int32
          description: The quantity of the product in the order
          minimum: 1
          maximum: 10000
          example: 2
      required:
        - productId
        - orderQuantity
    order_create:
      type: object
      properties:
        customerId:
          type: string
          format: uuid
        selectPaymentMethodId:
          type: string
          format: uuid
          nullable: true
        orderLines:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/order_line_create'
          description: The order lines of the order
      required:
        - customerId
    category_list:
      type: array
      items:
        $ref: '#/components/schemas/category'
